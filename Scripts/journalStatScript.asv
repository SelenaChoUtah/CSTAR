% Table of Contents
%     1) Load Data
%     2) Head/Neck/Lumbar Turns
%     3) Wear time
%     4) Steps 
%     5) Head on Trunk Turns
%     6) Mean/StDev/CV
%     7) Ribbon Plots
%     8) Number of Turns per hour ICC
%     9) ICC
%     10) Comparing t-test on calibration methods
%     11) Generating Table for LMM
cd('C:\Users\chose\Box\Digital Health Pilot - Multimodal Sensing')
addpath(genpath('Data\'))
addpath(genpath('CSTAR\'))
cd('C:\Users\chose\Box\C-STAR Pilot')

%% 1) Load Data IN
% addpath(genpath(pwd))
currentFoldPath = cd;

processPath = dir(fullfile(currentFoldPath,'\Data\Process'));
processPath = processPath(~ismember({processPath.name}, {'.', '..'}));
subjectnum = processPath(listdlg('PromptString',{'Select Subjects to Pull (can select multiple)',''},...
        'SelectionMode','multiple','ListString',{processPath.name}));

% Load Data 
for ii = 1:numel(subjectnum)
    % Save Data into Process
    id = string(subjectnum(ii).name);
    % disp(id)   
    data.(id) = load(fullfile(subjectnum(ii).folder,subjectnum(ii).name,'data.mat'));   

end

clearvars -except data

%% 2) Head/Neck/Lumbar Turns ---------------------------------------------%
clearvars placeData
metrics = {'amplitude','angVelocity'};

% go in and extract amp, angVel, number
id = fieldnames(data);
for ii = 1:length(id)
    dayNum = fieldnames(data.(id{ii}).turnData);
    for dd = 1:length(dayNum)
        sensor = fieldnames(data.(id{ii}).turnData.(dayNum{dd}));
        for ss = 1:length(sensor)
            for mm = 1:length(metrics)
                if isfield(data.(id{ii}).turnData.(dayNum{dd}), sensor{ss}) && isfield(data.(id{ii}).turnDataCali.(dayNum{dd}), sensor{ss})
                    placeData.(sensor{ss}).(metrics{mm}){dd,ii} = mean(data.(id{ii}).turnData.(dayNum{dd}).(sensor{ss}).(metrics{mm}));
                    placeData.(sensor{ss}).frequency{dd,ii} = length(data.(id{ii}).turnData.(dayNum{dd}).(sensor{ss}).(metrics{mm}));
                    placeData2.(sensor{ss}).(metrics{mm}){dd,ii} = mean(data.(id{ii}).turnDataCali.(dayNum{dd}).(sensor{ss}).(metrics{mm}));
                    placeData2.(sensor{ss}).frequency{dd,ii} = length(data.(id{ii}).turnDataCali.(dayNum{dd}).(sensor{ss}).(metrics{mm}));
                else
                    placeData.(sensor{ss}).(metrics{mm}){dd,ii} = [];
                    placeData.(sensor{ss}).frequency{dd,ii} = [];
                    placeData2.(sensor{ss}).(metrics{mm}){dd,ii} = [];
                    placeData2.(sensor{ss}).frequency{dd,ii} = [];
                end
            end
        end
    end
end

%% Turns per hour
id = fieldnames(data);
for ii = 1:length(id)
    dayNum = fieldnames(data.(id{ii}).turnData);
    for dd = 1:length(dayNum)
        
        sensor = fieldnames(data.(id{ii}).turnData.(dayNum{dd}));
        for ss = 1:length(sensor)
            try
            dayLength = data.(id{ii}).timeData.(dayNum{dd}).(sensor{ss}).dayLength;
            numHoursIdx = linspace(1,dayLength,25);
            index = data.(id{ii}).turnData.(dayNum{dd}).(sensor{ss}).startstop(:,1);
            index2 = data.(id{ii}).turnDataCali.(dayNum{dd}).(sensor{ss}).startstop(:,1);
            for nn = 2:length(numHoursIdx)
                turnPerHour(nn-1) = length(find(index>numHoursIdx(nn-1) & index<numHoursIdx(nn)));
                turnPerHour2(nn-1) = length(find(index2>numHoursIdx(nn-1) & index2<numHoursIdx(nn)));

                ampPerHour(nn-1) = mean(data.(id{ii}).turnData.(dayNum{dd}).(sensor{ss}).amplitude(find(index>numHoursIdx(nn-1) & index<numHoursIdx(nn))));
                ampPerHour2(nn-1) = mean(data.(id{ii}).turnDataCali.(dayNum{dd}).(sensor{ss}).amplitude(find(index2>numHoursIdx(nn-1) & index2<numHoursIdx(nn))));

                velPerHour(nn-1) = mean(data.(id{ii}).turnData.(dayNum{dd}).(sensor{ss}).angVelocity(find(index>numHoursIdx(nn-1) & index<numHoursIdx(nn))));
                velPerHour2(nn-1) = mean(data.(id{ii}).turnDataCali.(dayNum{dd}).(sensor{ss}).angVelocity(find(index2>numHoursIdx(nn-1) & index2<numHoursIdx(nn))));
                if ampPerHour(nn-1) > 360 %|| ampPerHour(nn-1) == 0
                    ampPerHour(nn-1) = 0;
                    velPerHour(nn-1) = 0;
                elseif ampPerHour2(nn-1) > 360 %|| ampPerHour2(nn-1) == 0
                    ampPerHour2(nn-1) = 0;
                    velPerHour(nn-1) = 0;
                end
            end
            placeData.(sensor{ss}).turnsPerHourMean.(id{ii}){dd,1} = mean(turnPerHour);
            placeData.(sensor{ss}).turnsPer24hr.(id{ii})(:,dd) = turnPerHour';
            placeData.(sensor{ss}).ampPer24hr.(id{ii})(:,dd) = ampPerHour';
            placeData.(sensor{ss}).velPer24hr.(id{ii})(:,dd) = velPerHour';
            placeData.(sensor{ss}).turnsPerHourSD.(id{ii}){dd,1} = std(turnPerHour);
            % Cali
            placeData2.(sensor{ss}).turnsPer24hr.(id{ii})(:,dd) = turnPerHour2';
            placeData2.(sensor{ss}).ampPer24hr.(id{ii})(:,dd) = ampPerHour2';
            placeData2.(sensor{ss}).velPer24hr.(id{ii})(:,dd) = velPerHour2';
            catch
                disp("no sensor")
            end
        end
    end
end

%% 3) Wear time

id = fieldnames(data);
for ii = 1:length(id)
    dayNum = fieldnames(data.(id{ii}).timeData);
    for dd = 1:length(dayNum)
        sensor = fieldnames(data.(id{ii}).timeData.(dayNum{dd}));
        for ss = 1:length(sensor)
            placeData.(sensor{ss}).wearTime{dd,ii} = data.(id{ii}).timeData.(dayNum{dd}).(sensor{ss}).wearTime;
        end
    end
end


%% 4) Steps 

id = fieldnames(data);
for ii = 1:length(id)
    dayNum = fieldnames(data.(id{ii}).stepData);
    for dd = 1:length(dayNum)
        try
        sensor = 'waist';
        placeData.(sensor).stepCount{dd,ii} = data.(id{ii}).stepData.(dayNum{dd}).(sensor).stepCount;
        placeData.(sensor).boutAverage{dd,ii} = mean(data.(id{ii}).stepData.(dayNum{dd}).(sensor).stepPerBout);
        if isnan(placeData.(sensor).boutAverage{dd,ii})
            placeData.(sensor).boutAverage{dd,ii} = [];
        
        end
        catch
        end
    end
end

%% 5) Head on Trunk Turns

id = fieldnames(data);
for ii = 1:length(id)
    dayNum = fieldnames(data.(id{ii}).headOnTrunkCount);
    for dd = 1:length(dayNum)
        placeData.head.ratio{dd,ii} = data.(id{ii}).headOnTrunkCount.(dayNum{dd})/data.(id{ii}).individual.(dayNum{dd});
        placeData.head.individual{dd,ii} = data.(id{ii}).headOnTrunkCount.(dayNum{dd});
    end
end


%% 6) Mean/StDev/CV

% cell2mat
sensor = fieldnames(placeData);
for ss = 1:length(sensor)
    metrics = fieldnames(placeData.(sensor{ss}));
    for mm = 1:length(metrics)
        try
        for dd = 1:length(placeData.(sensor{ss}).(metrics{mm}))
            average(dd) = mean(cell2mat(placeData.(sensor{ss}).(metrics{mm})(:,dd)));
            sd(dd) = std(cell2mat(placeData.(sensor{ss}).(metrics{mm})(:,dd)));
            average2(dd) = mean(cell2mat(placeData2.(sensor{ss}).(metrics{mm})(:,dd)));
            sd2(dd) = std(cell2mat(placeData2.(sensor{ss}).(metrics{mm})(:,dd)));
        end
        catch
            disp(append(sensor{ss},metrics{mm}))
        end
        statsMean.(sensor{ss}).(metrics{mm}) = average;
        statsSD.(sensor{ss}).(metrics{mm}) = sd;
        statsMean2.(sensor{ss}).(metrics{mm}) = average2;
        statsSD2.(sensor{ss}).(metrics{mm}) = sd2;
    end
end


sensor = fieldnames(statsMean);
for ss = 1:length(sensor)
    metrics = fieldnames(placeData.(sensor{ss}));
    for mm = 1:length(metrics)
        statData.(sensor{ss}).(metrics{mm}).mean = mean(statsMean.(sensor{ss}).(metrics{mm}));
        statData.(sensor{ss}).(metrics{mm}).stDev = mean(statsSD.(sensor{ss}).(metrics{mm}));
        statData.(sensor{ss}).(metrics{mm}).cv = mean(statsSD.(sensor{ss}).(metrics{mm})./statsMean.(sensor{ss}).(metrics{mm}));
        statData.(sensor{ss}).(metrics{mm}).cvSD = std(statsSD.(sensor{ss}).(metrics{mm})./statsMean.(sensor{ss}).(metrics{mm}));
    end
end

%% 7) Ribbon Plot Days vs Hours
close all
[day,hr] = meshgrid(1:6,1:24);
figure
plot3(day,hr,placeData.head.turnsPer24hr,'LineWidth',5)
xlabel("day number")
ylabel("hour in day")
zlabel("Number of turns per hour")
set(gca, 'YDir', 'reverse');
grid on


%% 
close all

sens = 'head';
metricA = 'amplitudeCV';
metricB = 'angVelocityCV';
% 
% figure
% plot(statsSD.(sens).(metricA)(1:6),statsSD.(sens).angVelocity(1:6),'*')
% hold on
% plot(statsSD.(sens).(metricA)(7:end),statsSD.(sens).angVelocity(7:end),'*')
% xlabel(metricA)
% ylabel('Peak Velocity')
% title(append(sens,' SD'))

figure
plot(statsMean.(sens).(metricA)(1:6),statsMean.(sens).(metricB)(1:6),'*')
hold on
plot(statsMean.(sens).(metricA)(7:end),statsMean.(sens).(metricB)(7:end),'*')
xlabel(metricA)
ylabel(metricB)
title(append(sens,' Mean'))

%%
% cell2mat
sensor = fieldnames(turn.dailyCV);
for ss = 1:length(sensor)
    metrics = fieldnames(turn);
    for mm = 1:length(metrics)
        try
        for dd = 1:length(turn.(sensor{ss}).(metrics{mm}))
            average(dd) = mean(cell2mat(turn.(sensor{ss}).(metrics{mm})(:,dd)));
            sd(dd) = std(cell2mat(turn.(sensor{ss}).(metrics{mm})(:,dd)));
        end
        catch
            disp(append(sensor{ss},metrics{mm}))
        end
        statsMean.(sensor{ss}).(metrics{mm}) = average;
        statsSD.(sensor{ss}).(metrics{mm}) = sd;
    end
end

%%

for i = 1:length(turn.dailyCV.head.amplitude)

    statsMean.head.amplitudeCV(i) = mean(nonzeros(turn.dailyCV.head.amplitude(:,i)));
end

%%
figure
id = fieldnames(data);
for ii = 1:length(id)
    nexttile
    plot(data.(id{ii}).turnData.day2.head.amplitude,data.(id{ii}).turnData.day2.head.angVelocity,'*')
    title(id{ii})
    xlim([0 400])
    ylim([0 600])
end
%%
figure
id = fieldnames(data);
for ii = 1:length(id)
    nexttile
    histogram(data.(id{ii}).turnData.day2.head.amplitude,40,'Normalization','percentage')
    title(id{ii})
    xlim([0 400])
    ylim([0 40])
end

figure
id = fieldnames(data);
for ii = 1:length(id)
    nexttile
    histfit(data.(id{ii}).turnData.day2.head.angVelocity,60,'kernel')
    title(id{ii})
    xlim([0 600])
end

%% 8A) Number of Turns per hour ICC --------------------------------------%
clearvars headCount

% 1) Check for weartime >10 hours based on paper Melissa rec
% 2) Pull out length of day + populate 24 x 1-hour epoch
nn = 1;
sensor = 'head';
id = fieldnames(data);
for ii = 1:length(id)
    dayNum = fieldnames(data.(id{ii}).timeData);
    for dd = 1:length(dayNum)
        try
        numOfHours = data.(id{ii}).timeData.(dayNum{dd}).(sensor).wearTime;
        dayLength = data.(id{ii}).timeData.(dayNum{dd}).(sensor).dayLength;
        if dayLength > 8630000 && numOfHours > 10
            % dayLength = data.(id{ii}).timeData.(dayNum{dd}).(sensor).dayLength;
            hourLength = round(dayLength/100/60/60); % convert to hours recorded
            hourIndex = hourLength*100*60*60;
            oneHourEpoch = linspace(0,hourIndex,hourLength+1);

            % within each epoch detect number of turns
            % Check index and translate to other measures
            startstop = data.(id{ii}).turnData.(dayNum{dd}).(sensor).startstop;
            
            for ee = 1:length(oneHourEpoch)-1                
                headCount(ee,nn) = length(find(startstop>oneHourEpoch(ee) & startstop<oneHourEpoch(ee+1)));
            end
            nn = nn+1;
        end        
        
        catch
        end        
    end
end

%% 8B) Number of Turns per hour ICC --------------------------------------%
clearvars avgHeadKin

% 1) Check for weartime >10 hours based on paper Melissa rec
% 2) Pull out length of day + populate 24 x 1-hour epoch
nn = 1;
sensor = 'head';
id = fieldnames(data);
for ii = 1:length(id)
    dayNum = fieldnames(data.(id{ii}).timeData);
    for dd = 1:length(dayNum)
        try
        numOfHours = data.(id{ii}).timeData.(dayNum{dd}).(sensor).wearTime;
        dayLength = data.(id{ii}).timeData.(dayNum{dd}).(sensor).dayLength;
        if dayLength > 8630000 && numOfHours > 10
            % dayLength = data.(id{ii}).timeData.(dayNum{dd}).(sensor).dayLength;
            hourLength = round(dayLength/100/60/60); % convert to hours recorded
            hourIndex = hourLength*100*60*60;
            oneHourEpoch = linspace(0,hourIndex,hourLength+1);

            % within each epoch detect number of turns
            % Check index and translate to other measures
            startstop = data.(id{ii}).turnData.(dayNum{dd}).(sensor).startstop;
            amplitude = data.(id{ii}).turnData.(dayNum{dd}).(sensor).angVelocity;
            
            for ee = 1:length(oneHourEpoch)-1       
                testVar =  find(startstop(:,1)>oneHourEpoch(ee) & startstop(:,1)<oneHourEpoch(ee+1));
                avgHeadKin(ee,nn) = mean(amplitude(testVar));
            end
            nn = nn+1;
        end        
        
        catch
        end        
    end
end

%% 9) ICC ----------------------------------------------------------------%

close all
avgHeadKin(isnan(avgHeadKin))=0;
turnPerHour = headCount;
turnPerHour(1:8,:) = [];
fullData = mean(turnPerHour);
taskName = 'turnsPerHour';

for i = 2:height(turnPerHour)
    partialData =  mean(turnPerHour(1:i,:));
    compareData = [partialData',fullData'];
    [r(i-1), LB(i), UB(i),~,~,~] = ICC(compareData, 'A-k');
end

figure
plot(r)
ylim([0 1.2])
xlim([0 24])
yline(0.7,'--')
title(taskName)
xlabel('hour in day')
ylabel('ICC')
saveas(gcf,append(taskName,'_icc'),'emf')

%% 10) Comparing t-test on calibration methods ---------------------------%

% create for loop
% if statement to see if the calibration exists for both days
metric = 'angVelocity';

[H,P,CI,STATS] = ttest(statsMean.head.(metric), statsMean2.head.(metric))

% % Display the t-statistic and p-value
% fprintf('t-statistic: %.4f\n', h);
% fprintf('p-value: %.4f\n', p);

figure
histogram(statsMean.head.(metric))
hold on
histogram(statsMean2.head.(metric))


% % Optional: Display the mean difference
% mean_difference = mean(method1_amplitude - method2_amplitude);
% fprintf('Mean Difference: %.4f\n', mean_difference);

% t-test for everyday per subject

id = fieldnames(placeData2.head.turnsPer24hr);
for ii = 1:length(id)
    [m,n] = size(placeData2.head.turnsPer24hr.(id{ii}));
    for nn = 1:n
        [~,pp.(id{ii})(nn,1),CI.(id{ii})(nn,1),tstat.(id{ii})(nn,1)] = ttest(placeData.head.turnsPer24hr.(id{ii})(:,nn), placeData2.head.turnsPer24hr.(id{ii})(:,nn));
    end
end


%% 11) Generating Table for LMM

% placeData.head.ampPer24hr.S04
variables = {'ampPer24hr','velPer24hr','turnsPer24hr'};

% Define Table
varNames = ["id", "day", "hour", "method", "amplitude", "angVelocity", "numOfTurns"];
compCaliTable = table('Size', [0, length(varNames)], 'VariableTypes', {'string', 'double', 'double', 'double', 'double', 'double', 'double'}, 'VariableNames', varNames);

for ii = 1:length(id)
    [hr,day] = size(placeData.head.ampPer24hr.(id{ii}));
    for dd = 1:day
        for hh = 1:hr        
            if placeData.head.ampPer24hr.(id{ii})(hh,dd) ~= 0 && placeData2.head.ampPer24hr.(id{ii})(hh,dd) ~= 0 && ~isnan(placeData.head.ampPer24hr.(id{ii})(hh,dd)) && ~isnan(placeData2.head.ampPer24hr.(id{ii})(hh,dd))
                amplitude = placeData.head.ampPer24hr.(id{ii})(hh,dd);
                angVelocity = placeData.head.velPer24hr.(id{ii})(hh,dd);
                numOfTurns = placeData.head.turnsPer24hr.(id{ii})(hh,dd);
                % method = 1 is walking
                method = 1;
                newRow = table(string(id{ii}), dd, hh, method, amplitude, angVelocity, numOfTurns,'VariableNames', varNames);

                amplitude2 = placeData2.head.ampPer24hr.(id{ii})(hh,dd);
                angVelocity2 = placeData2.head.velPer24hr.(id{ii})(hh,dd);
                numOfTurns2 = placeData2.head.turnsPer24hr.(id{ii})(hh,dd);
                % method = 2 is calibration
                method = 2;
                newRow2 = table(string(id{ii}), dd, hh, method, amplitude2, angVelocity2, numOfTurns2,'VariableNames', varNames);
                compCaliTable = [compCaliTable; newRow; newRow2];
            end
        end
    end
end

%% fitlme for methods

% Model for amplitude with fixed effect of method and random effects for day and hour nested by ID
lmeAmplitude = fitlme(compCaliTable, ...
    'amplitude ~ method + (1|id) + (1|id:day) + (1|id:hour)');

% Model for angVelocity
lmeAngVelocity = fitlme(compCaliTable, ...
    'angVelocity ~ method + (1|id) + (1|id:day) + (1|id:hour)');

% Model for numOfTurns
lmeNumOfTurns = fitlme(compCaliTable, ...
    'numOfTurns ~ method + (1|id) + (1|id:day) + (1|id:hour)');

% Display summaries of each model
disp('Amplitude Model Summary:')
disp(lmeAmplitude)

disp('AngVelocity Model Summary:')
disp(lmeAngVelocity)

disp('NumOfTurns Model Summary:')
disp(lmeNumOfTurns)

%% Find the awake periods

sensor = 'head';
id = fieldnames(data);
for ii = 6%1:length(id)
    dayNum = fieldnames(data.(id{ii}).timeData);
    figure
    for dd = 1:length(dayNum)
        counts = data.(id{ii}).timeData.(dayNum{dd}).(sensor).activityCounts;
        consecutive_count = 0;
        below_threshold = counts<3;
        nexttile
        plot(below_threshold,'*')
        % for i = 1:length(counts)
        %     if ~below_threshold(i)
        %         consecutive_count = consecutive_count + 1; % Increment count if below threshold
        %     elseif ~below_threshold(i+1)
        %         consecutive_count = consecutive_count + 1; % Reset count if above threshold
        %     else
        %         consecutive_count = 0;
        %     end
        % 
        %     if consecutive_count >= 90
        %         % Mark the indices as part of the period
        %         awake = (i-consecutive_count+1:i);
        %         break
        %     end
        % end
        % 
        % for i = length(counts):-1:1
        %     if below_threshold(i)
        %         consecutive_count = consecutive_count + 1; % Increment count if below threshold
        %     elseif below_threshold(i-1)
        %         consecutive_count = consecutive_count + 1; % Reset count if above threshold
        %     else
        %         consecutive_count = 0;
        %     end
        % 
        %     if consecutive_count >= 90
        %         % Mark the indices as part of the period
        %         beforeBed = (i:i+consecutive_count-1);
        %         break
        %     end
        % end

    end
end

% find first period of 90min to detect that it's awake








